@{
    ViewData["Title"] = "Home Page";
}

<!-- Client side libs required  -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.1.1/min/dropzone.min.css" crossorigin="anonymous">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/blueimp-gallery/2.25.2/css/blueimp-gallery.min.css" crossorigin="anonymous">

<style>
    html {
        font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    }

    main {
        margin: 20px;
    }

    #gallery-note {
        font-size: smaller
    }

    .blueimp-gallery {
        margin: 25px;
        max-width: 150px;
        padding-bottom: 150px;
    }

    .dropzone {
        border: 3px dashed #00a1f1;
        background: #F0F8FF;
        margin: 25px;
        border-radius: 5px;
        max-width: 400px;
    }

    .dropzone .dz-message {
        font-weight: 350;
    }

    .dropzone .dz-message .note {
        font-family: sans-serif;
        font-size: 18px;
        font-weight: 200;
        display: block;
        margin-top 1.5rem;
    }
</style>

<main>
    <div class="box header">
        <h1><span class="fa fa-user-circle-o"></span> <span id="page-title">Upload local image and analyze using Computer Vision</span></h1>
    </div>
    
    <div class="box content">
        <hr>
        <h2>Upload photos</h2>
        <div>
            <form action="/api/images/upload"
                 class="dropzone needsclick dz-clickable" 
                 id="image-upload"
                 method="post"
                 enctype="multipart/form">

                <div class="dz-message needsclick">
                    <span class="note needsclick">
                        Drop files here or click to upload.
                    </span>
                </div>
            </form>
        </div>
        <h2>Generated Thumbnails</h2>
            <!-- <p><span id="gallery-note">Gallery refreshes from storage container image links every 5 seconds.</span></p> -->
            <div id="stored-images"></div>

            <!-- The Gallery as inline carousel, can be positioned anywhere on the page -->
            <div id="blueimp-gallery-carousel" class="blueimp-gallery blueimp-gallery-carousel">
                <div class="slides"></div>
                <h3 class="title"></h3>
                <a class="prev">‹</a>
                <a class="next">›</a>
                <a class="play-pause"></a>
                <ol class="indicator"></ol>
            </div>
        </div>
    </div>
    <div class="box footer">
        <hr>
        <p>Pilih foto yang ingin dianalisis -> klik kanan -> "Copy image adress"</p>
        <script type="text/javascript">
        function processImage() {
            // **********************************************
            // *** Update or verify the following values. ***
            // **********************************************

            // Replace <Subscription Key> with your valid subscription key.
            var subscriptionKey = "b0b0a05d7d884b3b89c53f716b35e6a0";

            // You must use the same Azure region in your REST API method as you used to
            // get your subscription keys. For example, if you got your subscription keys
            // from the West US region, replace "westcentralus" in the URL
            // below with "westus".
            //
            // Free trial subscription keys are generated in the "westus" region.
            // If you use a free trial subscription key, you shouldn't need to change
            // this region.
            var uriBase =
                "https://computervisionsubmisi02.cognitiveservices.azure.com/vision/v2.0/analyze";

            // Request parameters.
            var params = {
                "visualFeatures": "Categories,Description,Color",
                "details": "",
                "language": "en",
            };

            // Display the image.
            var sourceImageUrl = document.getElementById("inputImage").value;
            document.querySelector("#sourceImage").src = sourceImageUrl;

            // Make the REST API call.
            $.ajax({
                url: uriBase + "?" + $.param(params),

                // Request headers.
                beforeSend: function(xhrObj){
                    xhrObj.setRequestHeader("Content-Type","application/json");
                    xhrObj.setRequestHeader(
                        "Ocp-Apim-Subscription-Key", subscriptionKey);
                },

                type: "POST",

                // Request body.
                data: '{"url": ' + '"' + sourceImageUrl + '"}',
            })

            .done(function(data) {
                // Show formatted JSON on webpage.
                $("#responseTextArea").val(JSON.stringify(data, null, 2));
                $("#description").text(data.description.captions[0].text);
            })

            .fail(function(jqXHR, textStatus, errorThrown) {
                // Display error message.
                var errorString = (errorThrown === "") ? "Error. " :
                    errorThrown + " (" + jqXHR.status + "): ";
                errorString += (jqXHR.responseText === "") ? "" :
                    jQuery.parseJSON(jqXHR.responseText).message;
                alert(errorString);
            });
        };
    </script>

    <h1>Analyze image</h1>
    <input type="text" name="inputImage" id="inputImage">
    <button onclick="processImage()">Analyze image</button>
    <div id="wrapper" style="width:1020px; display:table;">
        <div id="jsonOutput" style="width:600px; display:table-cell;">
            Response:
            <br><br>
            <textarea id="responseTextArea" class="UIInput" style="width:580px; height:400px;"></textarea>
        </div>
        <div id="imageDiv" style="width:420px; display:table-cell;">
            Source image:
            <br><br>
            <img id="sourceImage" width="400" />
            <p id="description"></p>
        </div>
    </div>
    </div>
</main>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.1.1/min/dropzone.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/blueimp-gallery/2.25.2/js/blueimp-gallery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>

<script>
    // init gallery for later use
    var gallery;

    // Grab links for images from backend api
    function fetchImageLinks() {
        // Fetch images
        $.get("api/Images/thumbnails", function(fetchedImageLinks) {
            console.log(fetchedImageLinks)

            // Check if anything is in there
            if ( _.isEmpty(fetchedImageLinks) ){
                console.log('empty fetched')
                // do nothing  
            } else {
                // Check if we have a gallery initialized
                if ( _.isEmpty(gallery) ) {
                    // initialize gallery
                    gallery = blueimp.Gallery(
                                fetchedImageLinks, // gallery links array
                                {
                                    container: '#blueimp-gallery-carousel',
                                    carousel: true
                                } // gallery options
                            );                    
                } else {
                    // check if images are equal to array
                    console.log('currently in gallery:')
                    console.log(gallery.list)
                    var imageLinksEqual = _.isEqual(_.sortBy(gallery.list.map(s => s.split("?")[0])), _.sortBy(fetchedImageLinks.map(s => s.split("?")[0])))
                    if ( imageLinksEqual ) {
                        console.log('images arr are equal')
                        // do nothing
                    } else {
                        console.log('images arr are not equal')

                        // update gallery with new image urls. Only compare actual url without SAS token query string
                        var newImageLinks = _.difference(fetchedImageLinks.map(s => s.split("?")[0]), gallery.list.map(s => s.split("?")[0]))

                        console.log('differene is: ')
                        console.log(newImageLinks)
                        // Only add new images
                        gallery.add(newImageLinks);

                        // Force image load
                        gallery.next();
                    }
                }       
            }     
        });
    }

    // Start first interval
    fetchImageLinks()
    
    setInterval(function() {
        fetchImageLinks()
    }, 5000) 

    /* Dropzone */
    // "imageUpload" is the camelized version of the HTML element's ID
    Dropzone.options.imageUpload = {
        paramName: "files", // The name that will be used to transfer the file
        dictDefaultMessage: "Drop files here or Click to Upload",
        addRemoveLinks: true, // Allows for cancellation of file upload and remove thumbnail
        init: function() {
            myDropzone = this;
            myDropzone.on("success", function(file, response) {
                console.log("Success");
                myDropzone.removeFile(file);
            });                    
        }
    };
</script>
